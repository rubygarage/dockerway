# Version - версия синтаксиса compose-файла. Файл Compose всегда начинается с номера версии, который указывает используемый формат файла. Это помогает гарантировать, что приложения будет работать как ожидается, так как новые функции или критические изменения постоянно добавляются в Compose.
version: '3.1'

# Volume – дисковое пространство между HostOS и ContainerOS. Проще – это папка на вашей локальной машине примонтированная внутрь контейнера.
volumes: # Объявим volumes, которые будут доступны в сервисах
  redis:
  postgres:
  assets:

# Service - запущенный контейнер
services: # Объявляем сервисы(контейнеры) которые будут запущены с помощью compose
  db:
    image: postgres:9.6 # В качестве образа сервиса используется официальный образ Postgresql из Docker Hub
    expose:
      - 5432 # Выделяем для postgres 5432-ый порт контейнера
    environment: # Указываем список глобальных ENV-переменных внутри текущего контейнера
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: projectname_development
    volumes:
      - postgres:/var/lib/postgresql/data # Все данные из директории data буду ложиться в volume `postgres`
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"] # Команда для проверки состояния сервиса

  in_memory_store:
    image: redis:3.2-alpine # В качестве образа сервиса используется официальный образ Redis из Docker Hub
    expose:
      - 6379 # Выделяем для redis 6379-ый порт контейнера
    volumes:
      - redis:/var/lib/redis/data
    healthcheck:
      test: ["CMD", "redis-cli", "-h", "localhost", "ping"]

  server_app: &server_app
    build: . # В качестве образа будет использоваться Dockerfile в текущей директории
    command: bundle exec rails server # переопределяем команду запуска контейнера
    entrypoint: "./docker-entrypoint.sh" # указываем какую команду нужно запустить перед тем как контейнер запустится
    volumes:
      - ./app:/home/www/projectname/app # Указываем, что директория app в контейнере будет ссылаться на директорию app в Host OS (локальная нода). Таким образом, при изменение файлов из app на вашей локальной машине, все изменения так же будут применены и на контейнер с данным сервисом.
      - ./config:/home/www/projectname/config
      - ./public:/home/www/projectname/public
      - ./tmp:/home/www/projectname/tmp
      - ./log:/home/www/projectname/log
      - assets:/home/www/projectname/public/assets
    tty: true # Открываем доступ для деббагинга контейнера
    stdin_open: true # Открываем доступ для деббагинга контейнера
    environment:
      RAILS_ENV: development
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: projectname_development
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      REDIS_DB: "redis://in_memory_store:6379"
      SECRET_KEY_BASE: STUB
      DEVISE_SECRET_KEY: STUB
    depends_on: # Указываем список сервисов от которых зависит текущий сервис. Текущий сервис будет запущен только после того как запустятся зависимые сервисы
      - db
      - in_memory_store
    ports:
      - 3000:3000 # Указываем что порт из контейнера будет проксироваться на порт HostOS (HostPort:ContainerPort)
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]

  server_worker_app:
    <<: *server_app # Наследуемся от сервиса server_app
    command: bundle exec sidekiq -C config/sidekiq.yml
    entrypoint: ''
    ports: []
    depends_on:
      - db
      - server_app
      - in_memory_store
    expose:
      - 3000 # Выделяем для sidekiq 3001-ый порт контейнера
    healthcheck:
      test: ["CMD-SHELL", "ps ax | grep -v grep | grep sidekiq || exit 1"]
